/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  web3,
  Address,
  Contract,
  ContractState,
  node,
  binToHex,
  TestContractResult,
  Asset,
  HexString,
  ContractFactory,
  contractIdFromAddress,
  ONE_ALPH,
  groupOfAddress,
  fromApiVals,
  subscribeToEvents,
  SubscribeOptions,
  Subscription,
  EventSubscription,
  randomTxId,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeEventsFromContract,
  testMethod,
  decodeContractCreatedEvent,
  decodeContractDestroyedEvent,
  ContractCreatedEvent,
  ContractDestroyedEvent,
} from "@alephium/web3";
import { default as SubContractJson } from "../sub/sub.ral.json";

export namespace SubTypes {
  export type Fields = {
    result: bigint;
  };

  export type State = ContractState<Fields>;

  export type SubEvent = ContractEvent<{ x: bigint; y: bigint }>;
}

class Factory extends ContractFactory<SubInstance, SubTypes.Fields> {
  at(address: string): SubInstance {
    return new SubInstance(address);
  }

  async testSubMethod(
    params: TestContractParams<SubTypes.Fields, { array: [bigint, bigint] }>
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "sub", params);
  }
}

export const Sub = new Factory(
  Contract.fromJson(
    SubContractJson,
    "",
    "513645f5c95a28d55a51070f3d5c51edbda05a98f46b23cad59952e2ee4846a1"
  )
);

export class SubInstance {
  readonly address: Address;
  readonly contractId: string;
  readonly groupIndex: number;

  constructor(address: Address) {
    this.address = address;
    this.contractId = binToHex(contractIdFromAddress(address));
    this.groupIndex = groupOfAddress(address);
  }

  async fetchState(): Promise<SubTypes.State> {
    const contractState = await web3
      .getCurrentNodeProvider()
      .contracts.getContractsAddressState(this.address, {
        group: this.groupIndex,
      });
    const state = Sub.contract.fromApiContractState(contractState);
    return {
      ...state,
      fields: state.fields as SubTypes.Fields,
    };
  }

  subscribeContractCreatedEvent(
    options: SubscribeOptions<ContractCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeEventsFromContract(
      options,
      this.address,
      -1,
      (event) => {
        return {
          ...decodeContractCreatedEvent(event),
          contractAddress: this.address,
        };
      },
      fromCount
    );
  }

  subscribeContractDestroyedEvent(
    options: SubscribeOptions<ContractDestroyedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeEventsFromContract(
      options,
      this.address,
      -2,
      (event) => {
        return {
          ...decodeContractDestroyedEvent(event),
          contractAddress: this.address,
        };
      },
      fromCount
    );
  }

  private decodeSubEvent(event: node.ContractEvent): SubTypes.SubEvent {
    if (event.eventIndex !== 0) {
      throw new Error(
        "Invalid event index: " + event.eventIndex + ", expected: 0"
      );
    }
    const fields = fromApiVals(event.fields, ["x", "y"], ["U256", "U256"]);
    return {
      contractAddress: this.address,
      blockHash: event.blockHash,
      txId: event.txId,
      eventIndex: event.eventIndex,
      name: "Sub",
      fields: { x: fields["x"] as bigint, y: fields["y"] as bigint },
    };
  }

  subscribeSubEvent(
    options: SubscribeOptions<SubTypes.SubEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeEventsFromContract(
      options,
      this.address,
      0,
      (event) => this.decodeSubEvent(event),
      fromCount
    );
  }

  subscribeEvents(
    options: SubscribeOptions<
      SubTypes.SubEvent | ContractCreatedEvent | ContractDestroyedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    const messageCallback = (event: node.ContractEvent): Promise<void> => {
      switch (event.eventIndex) {
        case 0: {
          return options.messageCallback(this.decodeSubEvent(event));
        }

        case -1: {
          return options.messageCallback({
            ...decodeContractCreatedEvent(event),
            contractAddress: this.address,
          });
        }

        case -2: {
          return options.messageCallback({
            ...decodeContractDestroyedEvent(event),
            contractAddress: this.address,
          });
        }

        default:
          throw new Error("Invalid event index: " + event.eventIndex);
      }
    };
    const errorCallback = (
      err: any,
      subscription: Subscription<node.ContractEvent>
    ): Promise<void> => {
      return options.errorCallback(
        err,
        subscription as unknown as Subscription<
          SubTypes.SubEvent | ContractCreatedEvent | ContractDestroyedEvent
        >
      );
    };
    const opt: SubscribeOptions<node.ContractEvent> = {
      pollingInterval: options.pollingInterval,
      messageCallback: messageCallback,
      errorCallback: errorCallback,
    };
    return subscribeToEvents(opt, this.address, fromCount);
  }

  async callSubMethod(
    params: CallContractParams<{ array: [bigint, bigint] }>
  ): Promise<Omit<CallContractResult, "returns"> & { returns: bigint }> {
    const txId = params?.txId ?? randomTxId();
    const callParams = Sub.contract.toApiCallContract(
      { ...params, txId: txId },
      this.groupIndex,
      this.address,
      0
    );
    const result = await web3
      .getCurrentNodeProvider()
      .contracts.postContractsCallContract(callParams);
    const callResult = Sub.contract.fromApiCallContractResult(result, txId, 0);
    return {
      ...callResult,
      returns: callResult.returns[0] as bigint,
    };
  }
}
