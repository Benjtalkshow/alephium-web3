/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  web3,
  SignerProvider,
  Address,
  toApiVals,
  DeployContractParams,
  DeployContractResult,
  Contract,
  ContractState,
  node,
  binToHex,
  TestContractResult,
  InputAsset,
  Asset,
  HexString,
  ContractFactory,
  contractIdFromAddress,
  fromApiArray,
  ONE_ALPH,
  groupOfAddress,
  fromApiVals,
  subscribeToEvents,
  SubscribeOptions,
  Subscription,
  EventSubscription,
} from "@alephium/web3";
import { default as SubContractJson } from "../sub/sub.ral.json";

export namespace Sub {
  export type Fields = {
    result: bigint;
  };

  export type State = Omit<ContractState, "fields"> & { fields: Fields };

  export type SubEvent = {
    blockHash: string;
    txId: string;
    eventIndex: number;
    fields: { x: bigint; y: bigint };
  };

  export type ContractCreatedEvent = {
    blockHash: string;
    txId: string;
    eventIndex: number;
    fields: { address: HexString };
  };

  export type ContractDestroyedEvent = {
    blockHash: string;
    txId: string;
    eventIndex: number;
    fields: { address: HexString };
  };

  export class Factory extends ContractFactory<SubInstance, Fields> {
    constructor(contract: Contract) {
      super(contract);
    }

    async deploy(
      signer: SignerProvider,
      deployParams: DeployContractParams<Fields>
    ): Promise<DeployContractResult<SubInstance>> {
      const signerParams = await contract.txParamsForDeployment(
        signer,
        deployParams
      );
      const result = await signer.signAndSubmitDeployContractTx(signerParams);
      return {
        instance: this.at(result.contractAddress),
        groupIndex: result.fromGroup,
        contractId: result.contractId,
        contractAddress: result.contractAddress,
        unsignedTx: result.unsignedTx,
        txId: result.txId,
        signature: result.signature,
        gasAmount: result.gasAmount,
        gasPrice: result.gasPrice,
      };
    }

    at(address: string): SubInstance {
      return new SubInstance(address);
    }
  }

  // This is used for testing contract functions
  export function stateForTest(
    initFields: Fields,
    asset?: Asset,
    address?: string
  ): ContractState {
    const newAsset = {
      alphAmount: asset?.alphAmount ?? ONE_ALPH,
      tokens: asset?.tokens,
    };
    return Sub.contract.toState(initFields, newAsset, address);
  }

  export async function testSubMethod(
    args: { array: [bigint, bigint] },
    initFields: Fields,
    testParams?: {
      group?: number;
      address?: string;
      initialAsset?: Asset;
      existingContracts?: ContractState[];
      inputAssets?: InputAsset[];
    }
  ): Promise<Omit<TestContractResult, "returns"> & { returns: bigint }> {
    const initialAsset = {
      alphAmount: testParams?.initialAsset?.alphAmount ?? ONE_ALPH,
      tokens: testParams?.initialAsset?.tokens,
    };
    const _testParams = {
      ...testParams,
      testMethodIndex: 0,
      testArgs: args,
      initialFields: initFields,
      initialAsset: initialAsset,
    };
    const testResult = await contract.testPublicMethod("sub", _testParams);
    const testReturns = testResult.returns as [bigint];
    return {
      ...testResult,
      returns: testReturns[0],
    };
  }

  export const contract = Contract.fromJson(SubContractJson);
  export const factory = new Factory(contract);
}

export class SubInstance {
  readonly address: Address;
  readonly contractId: string;
  readonly groupIndex: number;

  constructor(address: Address) {
    this.address = address;
    this.contractId = binToHex(contractIdFromAddress(address));
    this.groupIndex = groupOfAddress(address);
  }

  async fetchState(): Promise<Sub.State> {
    const state = await Sub.contract.fetchState(this.address, this.groupIndex);
    return {
      ...state,
      fields: { result: state.fields["result"] as bigint },
    };
  }

  private decodeSubEvent(event: node.ContractEvent): Sub.SubEvent {
    if (event.eventIndex !== 0) {
      throw new Error(
        "Invalid event index: " + event.eventIndex + ", expected: 0"
      );
    }
    const fields = fromApiVals(event.fields, ["x", "y"], ["U256", "U256"]);
    return {
      blockHash: event.blockHash,
      txId: event.txId,
      eventIndex: event.eventIndex,
      fields: { x: fields["x"] as bigint, y: fields["y"] as bigint },
    };
  }

  subscribeSubEvent(
    options: SubscribeOptions<Sub.SubEvent>,
    fromCount?: number
  ): EventSubscription {
    const messageCallback = (event: node.ContractEvent): Promise<void> => {
      if (event.eventIndex !== 0) {
        return Promise.resolve();
      }
      return options.messageCallback(this.decodeSubEvent(event));
    };

    const errorCallback = (
      err: any,
      subscription: Subscription<node.ContractEvent>
    ): Promise<void> => {
      return options.errorCallback(
        err,
        subscription as unknown as Subscription<Sub.SubEvent>
      );
    };
    const opt: SubscribeOptions<node.ContractEvent> = {
      pollingInterval: options.pollingInterval,
      messageCallback: messageCallback,
      errorCallback: errorCallback,
    };
    return subscribeToEvents(opt, this.address, fromCount);
  }

  private decodeContractCreatedEvent(
    event: node.ContractEvent
  ): Sub.ContractCreatedEvent {
    if (event.eventIndex !== -1) {
      throw new Error(
        "Invalid event index: " + event.eventIndex + ", expected: -1"
      );
    }
    const fields = fromApiVals(event.fields, ["address"], ["Address"]);
    return {
      blockHash: event.blockHash,
      txId: event.txId,
      eventIndex: event.eventIndex,
      fields: { address: fields["address"] as HexString },
    };
  }

  subscribeContractCreatedEvent(
    options: SubscribeOptions<Sub.ContractCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    const messageCallback = (event: node.ContractEvent): Promise<void> => {
      if (event.eventIndex !== -1) {
        return Promise.resolve();
      }
      return options.messageCallback(this.decodeContractCreatedEvent(event));
    };

    const errorCallback = (
      err: any,
      subscription: Subscription<node.ContractEvent>
    ): Promise<void> => {
      return options.errorCallback(
        err,
        subscription as unknown as Subscription<Sub.ContractCreatedEvent>
      );
    };
    const opt: SubscribeOptions<node.ContractEvent> = {
      pollingInterval: options.pollingInterval,
      messageCallback: messageCallback,
      errorCallback: errorCallback,
    };
    return subscribeToEvents(opt, this.address, fromCount);
  }

  private decodeContractDestroyedEvent(
    event: node.ContractEvent
  ): Sub.ContractDestroyedEvent {
    if (event.eventIndex !== -2) {
      throw new Error(
        "Invalid event index: " + event.eventIndex + ", expected: -2"
      );
    }
    const fields = fromApiVals(event.fields, ["address"], ["Address"]);
    return {
      blockHash: event.blockHash,
      txId: event.txId,
      eventIndex: event.eventIndex,
      fields: { address: fields["address"] as HexString },
    };
  }

  subscribeContractDestroyedEvent(
    options: SubscribeOptions<Sub.ContractDestroyedEvent>,
    fromCount?: number
  ): EventSubscription {
    const messageCallback = (event: node.ContractEvent): Promise<void> => {
      if (event.eventIndex !== -2) {
        return Promise.resolve();
      }
      return options.messageCallback(this.decodeContractDestroyedEvent(event));
    };

    const errorCallback = (
      err: any,
      subscription: Subscription<node.ContractEvent>
    ): Promise<void> => {
      return options.errorCallback(
        err,
        subscription as unknown as Subscription<Sub.ContractDestroyedEvent>
      );
    };
    const opt: SubscribeOptions<node.ContractEvent> = {
      pollingInterval: options.pollingInterval,
      messageCallback: messageCallback,
      errorCallback: errorCallback,
    };
    return subscribeToEvents(opt, this.address, fromCount);
  }

  subscribeEvents(
    options: SubscribeOptions<
      Sub.SubEvent | Sub.ContractCreatedEvent | Sub.ContractDestroyedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    const messageCallback = (event: node.ContractEvent): Promise<void> => {
      switch (event.eventIndex) {
        case 0: {
          return options.messageCallback(this.decodeSubEvent(event));
        }

        case -1: {
          return options.messageCallback(
            this.decodeContractCreatedEvent(event)
          );
        }

        case -2: {
          return options.messageCallback(
            this.decodeContractDestroyedEvent(event)
          );
        }

        default:
          throw new Error("Invalid event index: " + event.eventIndex);
      }
    };

    const errorCallback = (
      err: any,
      subscription: Subscription<node.ContractEvent>
    ): Promise<void> => {
      return options.errorCallback(
        err,
        subscription as unknown as Subscription<
          Sub.SubEvent | Sub.ContractCreatedEvent | Sub.ContractDestroyedEvent
        >
      );
    };
    const opt: SubscribeOptions<node.ContractEvent> = {
      pollingInterval: options.pollingInterval,
      messageCallback: messageCallback,
      errorCallback: errorCallback,
    };
    return subscribeToEvents(opt, this.address, fromCount);
  }

  async callSubMethod(
    args: { array: [bigint, bigint] },
    callParams?: {
      worldStateBlockHash?: string;
      txId?: string;
      existingContracts?: string[];
      inputAssets?: node.TestInputAsset[];
    }
  ): Promise<bigint> {
    const callResult = await web3
      .getCurrentNodeProvider()
      .contracts.postContractsCallContract({
        group: this.groupIndex,
        worldStateBlockHash: callParams?.worldStateBlockHash,
        txId: callParams?.txId,
        address: this.address,
        methodIndex: 0,
        args: toApiVals({ array: args.array }, ["array"], ["[U256;2]"]),
        existingContracts: callParams?.existingContracts,
        inputAssets: callParams?.inputAssets,
      });
    return fromApiArray(callResult.returns, ["U256"])[0] as bigint;
  }
}
