/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as NFTTestContractJson } from "../nft/nft_test.ral.json";

// Custom types for the contract
export namespace NFTTestTypes {
  export type Fields = {
    uri: HexString;
    __stdId: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getTokenUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<NFTTestInstance, NFTTestTypes.Fields> {
  at(address: string): NFTTestInstance {
    return new NFTTestInstance(address);
  }

  tests = {
    getTokenUri: async (
      params: Omit<TestContractParams<NFTTestTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getTokenUri", params);
    },
  };
}

// Use this object to test and deploy the contract
export const NFTTest = new Factory(
  Contract.fromJson(
    NFTTestContractJson,
    "",
    "c654f89a813259b6e270c8cf609200907f0824755bb394b00d8b151c3fddf95f"
  )
);

// Use this class to interact with the blockchain
export class NFTTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTTestTypes.State> {
    return fetchContractState(NFTTest, this);
  }

  methods = {
    getTokenUri: async (
      params?: NFTTestTypes.CallMethodParams<"getTokenUri">
    ): Promise<NFTTestTypes.CallMethodResult<"getTokenUri">> => {
      return callMethod(
        NFTTest,
        this,
        "getTokenUri",
        params === undefined ? {} : params
      );
    },
  };

  async multicall<Calls extends NFTTestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NFTTestTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      NFTTest,
      this,
      calls
    )) as NFTTestTypes.MultiCallResults<Calls>;
  }
}
