/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  web3,
  SignerProvider,
  Address,
  DeployContractParams,
  DeployContractResult,
  Contract,
  ContractState,
  node,
  binToHex,
  TestContractResult,
  Asset,
  HexString,
  ContractFactory,
  contractIdFromAddress,
  ONE_ALPH,
  groupOfAddress,
  fromApiVals,
  subscribeToEvents,
  SubscribeOptions,
  Subscription,
  EventSubscription,
  randomTxId,
  CallContractParams,
  CallContractResult,
  TestContractParams,
} from "@alephium/web3";
import { default as GreeterContractJson } from "../greeter/greeter.ral.json";

export namespace Greeter {
  export type Fields = {
    btcPrice: bigint;
  };

  export type State = ContractState<Fields>;

  export type ContractCreatedEvent = {
    contractAddress: string;
    blockHash: string;
    txId: string;
    eventIndex: number;
    name: string;
    fields: { address: HexString };
  };

  export type ContractDestroyedEvent = {
    contractAddress: string;
    blockHash: string;
    txId: string;
    eventIndex: number;
    name: string;
    fields: { address: HexString };
  };

  export class Factory extends ContractFactory<GreeterInstance, Fields> {
    constructor(contract: Contract) {
      super(contract);
    }

    async deploy(
      signer: SignerProvider,
      deployParams: DeployContractParams<Fields>
    ): Promise<DeployContractResult<GreeterInstance>> {
      const signerParams = await contract.txParamsForDeployment(
        signer,
        deployParams
      );
      const result = await signer.signAndSubmitDeployContractTx(signerParams);
      return {
        instance: this.at(result.contractAddress),
        groupIndex: result.fromGroup,
        contractId: result.contractId,
        contractAddress: result.contractAddress,
        unsignedTx: result.unsignedTx,
        txId: result.txId,
        signature: result.signature,
        gasAmount: result.gasAmount,
        gasPrice: result.gasPrice,
      };
    }

    at(address: string): GreeterInstance {
      return new GreeterInstance(address);
    }
  }

  // This is used for testing contract functions
  export function stateForTest(
    initFields: Fields,
    asset?: Asset,
    address?: string
  ): ContractState<Greeter.Fields> {
    const newAsset = {
      alphAmount: asset?.alphAmount ?? ONE_ALPH,
      tokens: asset?.tokens,
    };
    return Greeter.contract.toState(initFields, newAsset, address);
  }

  export async function testGreetMethod(
    params: Omit<TestContractParams<Greeter.Fields, {}>, "testArgs">
  ): Promise<Omit<TestContractResult, "returns"> & { returns: bigint }> {
    const txId = params?.txId ?? randomTxId();
    const apiParams = Greeter.contract.toApiTestContractParams("greet", {
      ...params,
      txId: txId,
      testArgs: {},
    });
    const apiResult = await web3
      .getCurrentNodeProvider()
      .contracts.postContractsTestContract(apiParams);
    const testResult = await Greeter.contract.fromApiTestContractResult(
      0,
      apiResult,
      txId
    );
    Greeter.contract.printDebugMessages("greet", testResult.debugMessages);
    const testReturns = testResult.returns as [bigint];
    return {
      ...testResult,
      returns: testReturns[0],
    };
  }

  export const contract = Contract.fromJson(
    GreeterContractJson,
    "",
    "d8a1c2190c6c54f720608a4b264d1c648a9865e0744e942e489c87e64d4e596a"
  );
  export const factory = new Factory(contract);
}

export class GreeterInstance {
  readonly address: Address;
  readonly contractId: string;
  readonly groupIndex: number;

  constructor(address: Address) {
    this.address = address;
    this.contractId = binToHex(contractIdFromAddress(address));
    this.groupIndex = groupOfAddress(address);
  }

  async fetchState(): Promise<Greeter.State> {
    const contractState = await web3
      .getCurrentNodeProvider()
      .contracts.getContractsAddressState(this.address, {
        group: this.groupIndex,
      });
    const state = Greeter.contract.fromApiContractState(contractState);
    return {
      ...state,
      fields: state.fields as Greeter.Fields,
    };
  }

  private decodeContractCreatedEvent(
    event: node.ContractEvent
  ): Greeter.ContractCreatedEvent {
    if (event.eventIndex !== -1) {
      throw new Error(
        "Invalid event index: " + event.eventIndex + ", expected: -1"
      );
    }
    const fields = fromApiVals(event.fields, ["address"], ["Address"]);
    return {
      contractAddress: this.address,
      blockHash: event.blockHash,
      txId: event.txId,
      eventIndex: event.eventIndex,
      name: "ContractCreated",
      fields: { address: fields["address"] as HexString },
    };
  }

  subscribeContractCreatedEvent(
    options: SubscribeOptions<Greeter.ContractCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    const messageCallback = (event: node.ContractEvent): Promise<void> => {
      if (event.eventIndex !== -1) {
        return Promise.resolve();
      }
      return options.messageCallback(this.decodeContractCreatedEvent(event));
    };

    const errorCallback = (
      err: any,
      subscription: Subscription<node.ContractEvent>
    ): Promise<void> => {
      return options.errorCallback(
        err,
        subscription as unknown as Subscription<Greeter.ContractCreatedEvent>
      );
    };
    const opt: SubscribeOptions<node.ContractEvent> = {
      pollingInterval: options.pollingInterval,
      messageCallback: messageCallback,
      errorCallback: errorCallback,
    };
    return subscribeToEvents(opt, this.address, fromCount);
  }

  private decodeContractDestroyedEvent(
    event: node.ContractEvent
  ): Greeter.ContractDestroyedEvent {
    if (event.eventIndex !== -2) {
      throw new Error(
        "Invalid event index: " + event.eventIndex + ", expected: -2"
      );
    }
    const fields = fromApiVals(event.fields, ["address"], ["Address"]);
    return {
      contractAddress: this.address,
      blockHash: event.blockHash,
      txId: event.txId,
      eventIndex: event.eventIndex,
      name: "ContractDestroyed",
      fields: { address: fields["address"] as HexString },
    };
  }

  subscribeContractDestroyedEvent(
    options: SubscribeOptions<Greeter.ContractDestroyedEvent>,
    fromCount?: number
  ): EventSubscription {
    const messageCallback = (event: node.ContractEvent): Promise<void> => {
      if (event.eventIndex !== -2) {
        return Promise.resolve();
      }
      return options.messageCallback(this.decodeContractDestroyedEvent(event));
    };

    const errorCallback = (
      err: any,
      subscription: Subscription<node.ContractEvent>
    ): Promise<void> => {
      return options.errorCallback(
        err,
        subscription as unknown as Subscription<Greeter.ContractDestroyedEvent>
      );
    };
    const opt: SubscribeOptions<node.ContractEvent> = {
      pollingInterval: options.pollingInterval,
      messageCallback: messageCallback,
      errorCallback: errorCallback,
    };
    return subscribeToEvents(opt, this.address, fromCount);
  }

  subscribeEvents(
    options: SubscribeOptions<
      Greeter.ContractCreatedEvent | Greeter.ContractDestroyedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    const messageCallback = (event: node.ContractEvent): Promise<void> => {
      switch (event.eventIndex) {
        case -1: {
          return options.messageCallback(
            this.decodeContractCreatedEvent(event)
          );
        }

        case -2: {
          return options.messageCallback(
            this.decodeContractDestroyedEvent(event)
          );
        }

        default:
          throw new Error("Invalid event index: " + event.eventIndex);
      }
    };

    const errorCallback = (
      err: any,
      subscription: Subscription<node.ContractEvent>
    ): Promise<void> => {
      return options.errorCallback(
        err,
        subscription as unknown as Subscription<
          Greeter.ContractCreatedEvent | Greeter.ContractDestroyedEvent
        >
      );
    };
    const opt: SubscribeOptions<node.ContractEvent> = {
      pollingInterval: options.pollingInterval,
      messageCallback: messageCallback,
      errorCallback: errorCallback,
    };
    return subscribeToEvents(opt, this.address, fromCount);
  }

  async callGreetMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<Omit<CallContractResult, "returns"> & { returns: bigint }> {
    const txId = params?.txId ?? randomTxId();
    const callParams = Greeter.contract.toApiCallContract(
      { ...params, txId: txId, args: {} },
      this.groupIndex,
      this.address,
      0
    );
    const result = await web3
      .getCurrentNodeProvider()
      .contracts.postContractsCallContract(callParams);
    const callResult = Greeter.contract.fromApiCallContractResult(
      result,
      txId,
      0
    );
    return {
      ...callResult,
      returns: callResult.returns[0] as bigint,
    };
  }
}
