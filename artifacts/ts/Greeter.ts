/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as GreeterContractJson } from "../greeter/greeter.ral.json";

// Custom types for the contract
export namespace GreeterTypes {
  export type Fields = {
    btcPrice: bigint;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<GreeterInstance, GreeterTypes.Fields> {
  at(address: string): GreeterInstance {
    return new GreeterInstance(address);
  }

  async testGreetMethod(
    params: Omit<TestContractParams<GreeterTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "greet", params);
  }
}

// Use this object to test and deploy the contract
export const Greeter = new Factory(
  Contract.fromJson(
    GreeterContractJson,
    "",
    "d8a1c2190c6c54f720608a4b264d1c648a9865e0744e942e489c87e64d4e596a"
  )
);

// Use this class to interact with the blockchain
export class GreeterInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<GreeterTypes.State> {
    return fetchContractState(Greeter, this);
  }

  async callGreetMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<bigint>> {
    return callMethod(
      Greeter,
      this,
      "greet",
      params === undefined ? {} : params
    );
  }
}
