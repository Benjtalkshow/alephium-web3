/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  web3,
  Address,
  Contract,
  ContractState,
  node,
  binToHex,
  TestContractResult,
  Asset,
  HexString,
  ContractFactory,
  contractIdFromAddress,
  ONE_ALPH,
  groupOfAddress,
  fromApiVals,
  subscribeToEvents,
  SubscribeOptions,
  Subscription,
  EventSubscription,
  randomTxId,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeEventsFromContract,
  testMethod,
  decodeContractCreatedEvent,
  decodeContractDestroyedEvent,
  ContractCreatedEvent,
  ContractDestroyedEvent,
} from "@alephium/web3";
import { default as AddContractJson } from "../add/add.ral.json";

export namespace AddTypes {
  export type Fields = {
    sub: HexString;
    result: bigint;
  };

  export type State = ContractState<Fields>;

  export type AddEvent = ContractEvent<{ x: bigint; y: bigint }>;
  export type Add1Event = ContractEvent<{ a: bigint; b: bigint }>;
}

class Factory extends ContractFactory<AddInstance, AddTypes.Fields> {
  at(address: string): AddInstance {
    return new AddInstance(address);
  }

  async testAddMethod(
    params: TestContractParams<AddTypes.Fields, { array: [bigint, bigint] }>
  ): Promise<TestContractResult<[bigint, bigint]>> {
    return testMethod(this, "add", params);
  }

  async testAddPrivateMethod(
    params: TestContractParams<AddTypes.Fields, { array: [bigint, bigint] }>
  ): Promise<TestContractResult<[bigint, bigint]>> {
    return testMethod(this, "addPrivate", params);
  }
}

export const Add = new Factory(
  Contract.fromJson(
    AddContractJson,
    "",
    "52d5893e97ce6b8d67d90fe1c51735e6e4f9946de732926fd160a0b50774f61b"
  )
);

export class AddInstance {
  readonly address: Address;
  readonly contractId: string;
  readonly groupIndex: number;

  constructor(address: Address) {
    this.address = address;
    this.contractId = binToHex(contractIdFromAddress(address));
    this.groupIndex = groupOfAddress(address);
  }

  async fetchState(): Promise<AddTypes.State> {
    const contractState = await web3
      .getCurrentNodeProvider()
      .contracts.getContractsAddressState(this.address, {
        group: this.groupIndex,
      });
    const state = Add.contract.fromApiContractState(contractState);
    return {
      ...state,
      fields: state.fields as AddTypes.Fields,
    };
  }

  subscribeContractCreatedEvent(
    options: SubscribeOptions<ContractCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeEventsFromContract(
      options,
      this.address,
      -1,
      (event) => {
        return {
          ...decodeContractCreatedEvent(event),
          contractAddress: this.address,
        };
      },
      fromCount
    );
  }

  subscribeContractDestroyedEvent(
    options: SubscribeOptions<ContractDestroyedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeEventsFromContract(
      options,
      this.address,
      -2,
      (event) => {
        return {
          ...decodeContractDestroyedEvent(event),
          contractAddress: this.address,
        };
      },
      fromCount
    );
  }

  private decodeAddEvent(event: node.ContractEvent): AddTypes.AddEvent {
    if (event.eventIndex !== 0) {
      throw new Error(
        "Invalid event index: " + event.eventIndex + ", expected: 0"
      );
    }
    const fields = fromApiVals(event.fields, ["x", "y"], ["U256", "U256"]);
    return {
      contractAddress: this.address,
      blockHash: event.blockHash,
      txId: event.txId,
      eventIndex: event.eventIndex,
      name: "Add",
      fields: { x: fields["x"] as bigint, y: fields["y"] as bigint },
    };
  }

  subscribeAddEvent(
    options: SubscribeOptions<AddTypes.AddEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeEventsFromContract(
      options,
      this.address,
      0,
      (event) => this.decodeAddEvent(event),
      fromCount
    );
  }

  private decodeAdd1Event(event: node.ContractEvent): AddTypes.Add1Event {
    if (event.eventIndex !== 1) {
      throw new Error(
        "Invalid event index: " + event.eventIndex + ", expected: 1"
      );
    }
    const fields = fromApiVals(event.fields, ["a", "b"], ["U256", "U256"]);
    return {
      contractAddress: this.address,
      blockHash: event.blockHash,
      txId: event.txId,
      eventIndex: event.eventIndex,
      name: "Add1",
      fields: { a: fields["a"] as bigint, b: fields["b"] as bigint },
    };
  }

  subscribeAdd1Event(
    options: SubscribeOptions<AddTypes.Add1Event>,
    fromCount?: number
  ): EventSubscription {
    return subscribeEventsFromContract(
      options,
      this.address,
      1,
      (event) => this.decodeAdd1Event(event),
      fromCount
    );
  }

  subscribeEvents(
    options: SubscribeOptions<
      | AddTypes.AddEvent
      | AddTypes.Add1Event
      | ContractCreatedEvent
      | ContractDestroyedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    const messageCallback = (event: node.ContractEvent): Promise<void> => {
      switch (event.eventIndex) {
        case 0: {
          return options.messageCallback(this.decodeAddEvent(event));
        }

        case 1: {
          return options.messageCallback(this.decodeAdd1Event(event));
        }

        case -1: {
          return options.messageCallback({
            ...decodeContractCreatedEvent(event),
            contractAddress: this.address,
          });
        }

        case -2: {
          return options.messageCallback({
            ...decodeContractDestroyedEvent(event),
            contractAddress: this.address,
          });
        }

        default:
          throw new Error("Invalid event index: " + event.eventIndex);
      }
    };
    const errorCallback = (
      err: any,
      subscription: Subscription<node.ContractEvent>
    ): Promise<void> => {
      return options.errorCallback(
        err,
        subscription as unknown as Subscription<
          | AddTypes.AddEvent
          | AddTypes.Add1Event
          | ContractCreatedEvent
          | ContractDestroyedEvent
        >
      );
    };
    const opt: SubscribeOptions<node.ContractEvent> = {
      pollingInterval: options.pollingInterval,
      messageCallback: messageCallback,
      errorCallback: errorCallback,
    };
    return subscribeToEvents(opt, this.address, fromCount);
  }

  async callAddMethod(
    params: CallContractParams<{ array: [bigint, bigint] }>
  ): Promise<
    Omit<CallContractResult, "returns"> & { returns: [bigint, bigint] }
  > {
    const txId = params?.txId ?? randomTxId();
    const callParams = Add.contract.toApiCallContract(
      { ...params, txId: txId },
      this.groupIndex,
      this.address,
      0
    );
    const result = await web3
      .getCurrentNodeProvider()
      .contracts.postContractsCallContract(callParams);
    const callResult = Add.contract.fromApiCallContractResult(result, txId, 0);
    return {
      ...callResult,
      returns: callResult.returns[0] as [bigint, bigint],
    };
  }
}
