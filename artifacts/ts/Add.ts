/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  fetchContractState,
  ContractInstance,
} from "@alephium/web3";
import { default as AddContractJson } from "../add/add.ral.json";

// Custom types for the contract
export namespace AddTypes {
  export type Fields = {
    sub: HexString;
    result: bigint;
  };

  export type State = ContractState<Fields>;

  export type AddEvent = ContractEvent<{ x: bigint; y: bigint }>;
  export type Add1Event = ContractEvent<{ a: bigint; b: bigint }>;
}

class Factory extends ContractFactory<AddInstance, AddTypes.Fields> {
  at(address: string): AddInstance {
    return new AddInstance(address);
  }

  async testAddMethod(
    params: TestContractParams<AddTypes.Fields, { array: [bigint, bigint] }>
  ): Promise<TestContractResult<[bigint, bigint]>> {
    return testMethod(this, "add", params);
  }

  async testAddPrivateMethod(
    params: TestContractParams<AddTypes.Fields, { array: [bigint, bigint] }>
  ): Promise<TestContractResult<[bigint, bigint]>> {
    return testMethod(this, "addPrivate", params);
  }

  async testCreateSubContractMethod(
    params: TestContractParams<
      AddTypes.Fields,
      { a: bigint; path: HexString; subContractId: HexString; payer: HexString }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "createSubContract", params);
  }
}

// Use this object to test and deploy the contract
export const Add = new Factory(
  Contract.fromJson(
    AddContractJson,
    "",
    "8e495ae544b65cc598a162e7839540a9ba4c9bc33b03522afbd36c174489b629"
  )
);

// Use this class to interact with the blockchain
export class AddInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AddTypes.State> {
    return fetchContractState(Add, this);
  }

  subscribeAddEvent(
    options: SubscribeOptions<AddTypes.AddEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Add.contract,
      this,
      options,
      "Add",
      fromCount
    );
  }

  subscribeAdd1Event(
    options: SubscribeOptions<AddTypes.Add1Event>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Add.contract,
      this,
      options,
      "Add1",
      fromCount
    );
  }

  subscribeAllEvents(
    options: SubscribeOptions<AddTypes.AddEvent | AddTypes.Add1Event>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Add.contract, this, options, fromCount);
  }

  async callAddMethod(
    params: CallContractParams<{ array: [bigint, bigint] }>
  ): Promise<CallContractResult<[bigint, bigint]>> {
    return callMethod(Add, this, "add", params);
  }
}
