/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  web3,
  SignerProvider,
  Address,
  toApiVals,
  DeployContractParams,
  DeployContractResult,
  Contract,
  ContractState,
  node,
  binToHex,
  TestContractResult,
  InputAsset,
  Asset,
  HexString,
  ContractFactory,
  contractIdFromAddress,
  fromApiArray,
  ONE_ALPH,
  groupOfAddress,
} from "@alephium/web3";
import { default as MetaDataContractJson } from "../test/metadata.ral.json";

export namespace MetaData {
  export type State = Omit<ContractState, "fields">;

  export class Factory extends ContractFactory<MetaDataInstance, undefined> {
    constructor(contract: Contract) {
      super(contract);
    }

    async deploy(
      signer: SignerProvider,
      deployParams: DeployContractParams<undefined>
    ): Promise<DeployContractResult<MetaDataInstance>> {
      const signerParams = await contract.txParamsForDeployment(
        signer,
        deployParams
      );
      const result = await signer.signAndSubmitDeployContractTx(signerParams);
      return {
        instance: this.at(result.contractAddress),
        groupIndex: result.fromGroup,
        contractId: result.contractId,
        contractAddress: result.contractAddress,
        unsignedTx: result.unsignedTx,
        txId: result.txId,
        signature: result.signature,
        gasAmount: result.gasAmount,
        gasPrice: result.gasPrice,
      };
    }

    at(address: string): MetaDataInstance {
      return new MetaDataInstance(address);
    }
  }

  // This is used for testing contract functions
  export function stateForTest(asset?: Asset, address?: string): ContractState {
    const newAsset = {
      alphAmount: asset?.alphAmount ?? ONE_ALPH,
      tokens: asset?.tokens,
    };
    return MetaData.contract.toState({}, newAsset, address);
  }

  export async function testFooMethod(testParams?: {
    group?: number;
    address?: string;
    initialAsset?: Asset;
    existingContracts?: ContractState[];
    inputAssets?: InputAsset[];
  }): Promise<Omit<TestContractResult, "returns">> {
    const initialAsset = {
      alphAmount: testParams?.initialAsset?.alphAmount ?? ONE_ALPH,
      tokens: testParams?.initialAsset?.tokens,
    };
    const _testParams = {
      ...testParams,
      testMethodIndex: 0,
      testArgs: {},
      initialFields: {},
      initialAsset: initialAsset,
    };
    const testResult = await contract.testPublicMethod("foo", _testParams);
    const testReturns = testResult.returns as [];
    return {
      ...testResult,
    };
  }

  export async function testBarMethod(testParams?: {
    group?: number;
    address?: string;
    initialAsset?: Asset;
    existingContracts?: ContractState[];
    inputAssets?: InputAsset[];
  }): Promise<Omit<TestContractResult, "returns">> {
    const initialAsset = {
      alphAmount: testParams?.initialAsset?.alphAmount ?? ONE_ALPH,
      tokens: testParams?.initialAsset?.tokens,
    };
    const _testParams = {
      ...testParams,
      testMethodIndex: 1,
      testArgs: {},
      initialFields: {},
      initialAsset: initialAsset,
    };
    const testResult = await contract.testPrivateMethod("bar", _testParams);
    const testReturns = testResult.returns as [];
    return {
      ...testResult,
    };
  }

  export async function testBazMethod(testParams?: {
    group?: number;
    address?: string;
    initialAsset?: Asset;
    existingContracts?: ContractState[];
    inputAssets?: InputAsset[];
  }): Promise<Omit<TestContractResult, "returns">> {
    const initialAsset = {
      alphAmount: testParams?.initialAsset?.alphAmount ?? ONE_ALPH,
      tokens: testParams?.initialAsset?.tokens,
    };
    const _testParams = {
      ...testParams,
      testMethodIndex: 2,
      testArgs: {},
      initialFields: {},
      initialAsset: initialAsset,
    };
    const testResult = await contract.testPrivateMethod("baz", _testParams);
    const testReturns = testResult.returns as [];
    return {
      ...testResult,
    };
  }

  export const contract = Contract.fromJson(MetaDataContractJson);
  export const factory = new Factory(contract);
}

export class MetaDataInstance {
  readonly address: Address;
  readonly contractId: string;
  readonly groupIndex: number;

  constructor(address: Address) {
    this.address = address;
    this.contractId = binToHex(contractIdFromAddress(address));
    this.groupIndex = groupOfAddress(address);
  }

  async fetchState(): Promise<MetaData.State> {
    const state = await MetaData.contract.fetchState(
      this.address,
      this.groupIndex
    );
    return {
      ...state,
    };
  }
}
