/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
} from "@alephium/web3";
import { default as MapTestContractJson } from "../test/MapTest.ral.json";
import { getContractByCodeHash } from "./contracts";
import {
  AddStruct1,
  AddStruct2,
  Balances,
  MapValue,
  TokenBalance,
  AllStructs,
} from "./types";

// Custom types for the contract
export namespace MapTestTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    insert: {
      params: CallContractParams<{ key: Address; value: MapValue }>;
      result: CallContractResult<null>;
    };
    update: {
      params: CallContractParams<{ key: Address }>;
      result: CallContractResult<null>;
    };
    remove: {
      params: CallContractParams<{ key: Address }>;
      result: CallContractResult<null>;
    };
    get: {
      params: CallContractParams<{ key: Address }>;
      result: CallContractResult<MapValue>;
    };
    contains: {
      params: CallContractParams<{ key: Address }>;
      result: CallContractResult<boolean>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    insert: {
      params: SignExecuteContractMethodParams<{
        key: Address;
        value: MapValue;
      }>;
      result: SignExecuteScriptTxResult;
    };
    update: {
      params: SignExecuteContractMethodParams<{ key: Address }>;
      result: SignExecuteScriptTxResult;
    };
    remove: {
      params: SignExecuteContractMethodParams<{ key: Address }>;
      result: SignExecuteScriptTxResult;
    };
    get: {
      params: SignExecuteContractMethodParams<{ key: Address }>;
      result: SignExecuteScriptTxResult;
    };
    contains: {
      params: SignExecuteContractMethodParams<{ key: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<MapTestInstance, {}> {
  at(address: string): MapTestInstance {
    return new MapTestInstance(address);
  }

  tests = {
    insert: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address; value: MapValue },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        null,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "insert", params);
    },
    update: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        null,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "update", params);
    },
    remove: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        null,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "remove", params);
    },
    get: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        MapValue,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "get", params);
    },
    contains: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        boolean,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "contains", params);
    },
  };
}

// Use this object to test and deploy the contract
export const MapTest = new Factory(
  Contract.fromJson(
    MapTestContractJson,
    "=6-1+4=3-1+a=2-2+11=3-1+3=3-1+5=12-1+b=40+7a037e0300012c00=56+7a037e0300012c00=217-1+a=114+7a047e0300012c00=46+7a047e0300012c00=136",
    "76d94621028b765345f083b3d7124c355a7fd8ca45e9253fc2661102f5533d11",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class MapTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MapTestTypes.State> {
    return fetchContractState(MapTest, this);
  }

  methods = {
    insert: async (
      params: MapTestTypes.CallMethodParams<"insert">
    ): Promise<MapTestTypes.CallMethodResult<"insert">> => {
      return callMethod(MapTest, this, "insert", params, getContractByCodeHash);
    },
    update: async (
      params: MapTestTypes.CallMethodParams<"update">
    ): Promise<MapTestTypes.CallMethodResult<"update">> => {
      return callMethod(MapTest, this, "update", params, getContractByCodeHash);
    },
    remove: async (
      params: MapTestTypes.CallMethodParams<"remove">
    ): Promise<MapTestTypes.CallMethodResult<"remove">> => {
      return callMethod(MapTest, this, "remove", params, getContractByCodeHash);
    },
    get: async (
      params: MapTestTypes.CallMethodParams<"get">
    ): Promise<MapTestTypes.CallMethodResult<"get">> => {
      return callMethod(MapTest, this, "get", params, getContractByCodeHash);
    },
    contains: async (
      params: MapTestTypes.CallMethodParams<"contains">
    ): Promise<MapTestTypes.CallMethodResult<"contains">> => {
      return callMethod(
        MapTest,
        this,
        "contains",
        params,
        getContractByCodeHash
      );
    },
  };

  call = this.methods;

  transaction = {
    insert: async (
      params: MapTestTypes.SignExecuteMethodParams<"insert">
    ): Promise<MapTestTypes.SignExecuteMethodResult<"insert">> => {
      return signExecuteMethod(MapTest, this, "insert", params);
    },
    update: async (
      params: MapTestTypes.SignExecuteMethodParams<"update">
    ): Promise<MapTestTypes.SignExecuteMethodResult<"update">> => {
      return signExecuteMethod(MapTest, this, "update", params);
    },
    remove: async (
      params: MapTestTypes.SignExecuteMethodParams<"remove">
    ): Promise<MapTestTypes.SignExecuteMethodResult<"remove">> => {
      return signExecuteMethod(MapTest, this, "remove", params);
    },
    get: async (
      params: MapTestTypes.SignExecuteMethodParams<"get">
    ): Promise<MapTestTypes.SignExecuteMethodResult<"get">> => {
      return signExecuteMethod(MapTest, this, "get", params);
    },
    contains: async (
      params: MapTestTypes.SignExecuteMethodParams<"contains">
    ): Promise<MapTestTypes.SignExecuteMethodResult<"contains">> => {
      return signExecuteMethod(MapTest, this, "contains", params);
    },
  };

  async multicall<Calls extends MapTestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<MapTestTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      MapTest,
      this,
      calls,
      getContractByCodeHash
    )) as MapTestTypes.MultiCallResults<Calls>;
  }
}
