/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as MapTestContractJson } from "../test/MapTest.ral.json";
import { getContractByCodeHash } from "./contracts";
import { Balances, MapValue, TokenBalance, AllStructs } from "./types";

// Custom types for the contract
export namespace MapTestTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    get: {
      params: CallContractParams<{ key: Address }>;
      result: CallContractResult<MapValue>;
    };
    contains: {
      params: CallContractParams<{ key: Address }>;
      result: CallContractResult<boolean>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<MapTestInstance, {}> {
  at(address: string): MapTestInstance {
    return new MapTestInstance(address);
  }

  tests = {
    insert: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address; value: MapValue },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        null,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "insert", params);
    },
    update: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        null,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "update", params);
    },
    remove: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        null,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "remove", params);
    },
    get: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        MapValue,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "get", params);
    },
    contains: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        boolean,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "contains", params);
    },
  };
}

// Use this object to test and deploy the contract
export const MapTest = new Factory(
  Contract.fromJson(
    MapTestContractJson,
    "=6-2+6e=2-1=1-4+e=2+5a4=1-1+82=2-2+9b=11-1+9=40+7a7e0214696e73657274206174206d617020706174683a2000=56+7a7e0214696e73657274206174206d617020706174683a2000=217-1+8=114+7a7e021472656d6f7665206174206d617020706174683a2000=46+7a7e021472656d6f7665206174206d617020706174683a2000=136",
    "0b93613225107052726d5a66e898b0734b982e0c841c3972cb6a682cc78aca00",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class MapTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MapTestTypes.State> {
    return fetchContractState(MapTest, this);
  }

  methods = {
    get: async (
      params: MapTestTypes.CallMethodParams<"get">
    ): Promise<MapTestTypes.CallMethodResult<"get">> => {
      return callMethod(MapTest, this, "get", params, getContractByCodeHash);
    },
    contains: async (
      params: MapTestTypes.CallMethodParams<"contains">
    ): Promise<MapTestTypes.CallMethodResult<"contains">> => {
      return callMethod(
        MapTest,
        this,
        "contains",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends MapTestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<MapTestTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      MapTest,
      this,
      calls,
      getContractByCodeHash
    )) as MapTestTypes.MultiCallResults<Calls>;
  }
}
