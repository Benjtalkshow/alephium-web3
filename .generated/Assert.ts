/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  web3,
  Contract as ContractArtifact,
  SignerProvider,
  Address,
  Token,
  toApiVals,
  ContractState,
  node,
  binToHex,
  TestContractResult,
  InputAsset,
  Asset,
  HexString,
  SignDeployContractTxResult,
  contractIdFromAddress,
  fromApiArray,
  ONE_ALPH,
  groupOfAddress,
} from "@alephium/web3";

export namespace Assert {
  export type State = Omit<ContractState, "fields">;

  export async function deploy(
    signer: SignerProvider,
    deployParams?: {
      initialAttoAlphAmount?: bigint;
      initialTokenAmounts?: Token[];
      issueTokenAmount?: bigint;
      gasAmount?: number;
      gasPrice?: bigint;
    }
  ): Promise<SignDeployContractTxResult & { instance: AssertInstance }> {
    const deployResult = await artifact.deploy(signer, {
      initialFields: {},
      initialAttoAlphAmount: deployParams?.initialAttoAlphAmount,
      initialTokenAmounts: deployParams?.initialTokenAmounts,
      issueTokenAmount: deployParams?.issueTokenAmount,
      gasAmount: deployParams?.gasAmount,
      gasPrice: deployParams?.gasPrice,
    });
    const instance = at(deployResult.contractAddress);
    return { instance: instance, ...deployResult };
  }

  export function at(address: string): AssertInstance {
    return new AssertInstance(address);
  }

  // This is used for testing contract functions
  export function stateForTest(asset?: Asset, address?: string): ContractState {
    const newAsset = {
      alphAmount: asset?.alphAmount ?? ONE_ALPH,
      tokens: asset?.tokens,
    };
    return Assert.artifact.toState({}, newAsset, address);
  }

  export async function testTestMethod(testParams?: {
    group?: number;
    address?: string;
    initialAsset?: Asset;
    existingContracts?: ContractState[];
    inputAssets?: InputAsset[];
  }): Promise<Omit<TestContractResult, "returns"> & { returns: [] }> {
    const initialAsset = {
      alphAmount: testParams?.initialAsset?.alphAmount ?? ONE_ALPH,
      tokens: testParams?.initialAsset?.tokens,
    };
    const _testParams = {
      ...testParams,
      testMethodIndex: 0,
      testArgs: {},
      initialFields: {},
      initialAsset: initialAsset,
    };
    const testResult = await artifact.testPublicMethod("test", _testParams);
    return { ...testResult, returns: testResult.returns as [] };
  }

  export const artifact = ContractArtifact.fromJson(
    JSON.parse(`{
  "version": "v1.7.0",
  "name": "Assert",
  "bytecode": "00010b0100000000050d0e2f0f7b",
  "codeHash": "5bd05924fb9a23ea105df065a8c2dfa463b9ee53cc14a60320140d19dd6151ca",
  "fieldsSig": {
    "names": [],
    "types": [],
    "isMutable": []
  },
  "eventsSig": [],
  "functions": [
    {
      "name": "test",
      "usePreapprovedAssets": false,
      "useAssetsInContract": false,
      "isPublic": true,
      "paramNames": [],
      "paramTypes": [],
      "paramIsMutable": [],
      "returnTypes": []
    }
  ]
}`)
  );
}

export class AssertInstance {
  readonly address: Address;
  readonly contractId: string;
  readonly groupIndex: number;

  constructor(address: Address) {
    this.address = address;
    this.contractId = binToHex(contractIdFromAddress(address));
    this.groupIndex = groupOfAddress(address);
  }

  async fetchState(): Promise<Assert.State> {
    const state = await Assert.artifact.fetchState(
      this.address,
      this.groupIndex
    );
    return {
      ...state,
    };
  }
}
