/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  web3,
  Contract as ContractArtifact,
  SignerProvider,
  Address,
  Token,
  toApiVals,
  ContractState,
  node,
  binToHex,
  TestContractResult,
  InputAsset,
  Asset,
  HexString,
  SignDeployContractTxResult,
  contractIdFromAddress,
  fromApiArray,
  ONE_ALPH,
  groupOfAddress,
} from "@alephium/web3";

export namespace Warnings {
  export type Fields = {
    a: bigint;
    b: bigint;
  };

  export type State = Fields & Omit<ContractState, "fields">;

  export async function deploy(
    signer: SignerProvider,
    initFields: Fields,
    deployParams?: {
      initialAttoAlphAmount?: bigint;
      initialTokenAmounts?: Token[];
      issueTokenAmount?: bigint;
      gasAmount?: number;
      gasPrice?: bigint;
    }
  ): Promise<SignDeployContractTxResult & { instance: WarningsInstance }> {
    const deployResult = await artifact.deploy(signer, {
      initialFields: initFields,
      initialAttoAlphAmount: deployParams?.initialAttoAlphAmount,
      initialTokenAmounts: deployParams?.initialTokenAmounts,
      issueTokenAmount: deployParams?.issueTokenAmount,
      gasAmount: deployParams?.gasAmount,
      gasPrice: deployParams?.gasPrice,
    });
    const instance = at(deployResult.contractAddress);
    return { instance: instance, ...deployResult };
  }

  export function at(address: string): WarningsInstance {
    return new WarningsInstance(address);
  }

  // This is used for testing contract functions
  export function stateForTest(
    a: bigint,
    b: bigint,
    asset?: Asset,
    address?: string
  ): ContractState {
    const newAsset = {
      alphAmount: asset?.alphAmount ?? ONE_ALPH,
      tokens: asset?.tokens,
    };
    return Warnings.artifact.toState({ a: a, b: b }, newAsset, address);
  }

  export async function testFooMethod(
    args: { x: bigint; y: bigint },
    initFields: Fields,
    testParams?: {
      group?: number;
      address?: string;
      initialAsset?: Asset;
      existingContracts?: ContractState[];
      inputAssets?: InputAsset[];
    }
  ): Promise<Omit<TestContractResult, "returns"> & { returns: [] }> {
    const initialAsset = {
      alphAmount: testParams?.initialAsset?.alphAmount ?? ONE_ALPH,
      tokens: testParams?.initialAsset?.tokens,
    };
    const _testParams = {
      ...testParams,
      testMethodIndex: 0,
      testArgs: args,
      initialFields: initFields,
      initialAsset: initialAsset,
    };
    const testResult = await artifact.testPublicMethod("foo", _testParams);
    return { ...testResult, returns: testResult.returns as [] };
  }

  export const artifact = ContractArtifact.fromJson(
    JSON.parse(`{
  "version": "v1.7.0",
  "name": "Warnings",
  "bytecode": "02010701000202000102",
  "codeHash": "9a0c90d67d729a478062d6794cf7b75c27483c50f6fe2ad13c5ed8873ad1fde2",
  "fieldsSig": {
    "names": [
      "a",
      "b"
    ],
    "types": [
      "U256",
      "U256"
    ],
    "isMutable": [
      false,
      false
    ]
  },
  "eventsSig": [],
  "functions": [
    {
      "name": "foo",
      "usePreapprovedAssets": false,
      "useAssetsInContract": false,
      "isPublic": true,
      "paramNames": [
        "x",
        "y"
      ],
      "paramTypes": [
        "U256",
        "U256"
      ],
      "paramIsMutable": [
        false,
        false
      ],
      "returnTypes": []
    }
  ]
}`)
  );
}

export class WarningsInstance {
  readonly address: Address;
  readonly contractId: string;
  readonly groupIndex: number;

  constructor(address: Address) {
    this.address = address;
    this.contractId = binToHex(contractIdFromAddress(address));
    this.groupIndex = groupOfAddress(address);
  }

  async fetchState(): Promise<Warnings.State> {
    const state = await Warnings.artifact.fetchState(
      this.address,
      this.groupIndex
    );
    return {
      ...state,
      a: state.fields["a"] as bigint,
      b: state.fields["b"] as bigint,
    };
  }
}
