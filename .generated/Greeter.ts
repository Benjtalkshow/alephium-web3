/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  web3,
  Contract as ContractArtifact,
  SignerProvider,
  Address,
  Token,
  toApiVals,
  ContractState,
  node,
  binToHex,
  TestContractResult,
  InputAsset,
  Asset,
  HexString,
  SignDeployContractTxResult,
  contractIdFromAddress,
  fromApiArray,
} from "@alephium/web3";

export namespace Greeter {
  export type Fields = {
    btcPrice: bigint;
  };

  export type State = Fields & Omit<ContractState, "fields">;

  export async function deploy(
    signer: SignerProvider,
    initFields: Greeter.Fields,
    deployParams?: {
      initialAttoAlphAmount?: bigint;
      initialTokenAmounts?: Token[];
      issueTokenAmount?: bigint;
      gasAmount?: number;
      gasPrice?: bigint;
    }
  ): Promise<Contract> {
    const deployResult = await artifact.deploy(signer, {
      initialFields: initFields,
      initialAttoAlphAmount: deployParams?.initialAttoAlphAmount,
      initialTokenAmounts: deployParams?.initialTokenAmounts,
      issueTokenAmount: deployParams?.issueTokenAmount,
      gasAmount: deployParams?.gasAmount,
      gasPrice: deployParams?.gasPrice,
    });
    return new Contract(
      deployResult.contractAddress,
      deployResult.contractId,
      deployResult.fromGroup,
      deployResult
    );
  }

  export function attach(
    address: string,
    deployResult?: SignDeployContractTxResult
  ): Contract {
    const contractId = binToHex(contractIdFromAddress(address));
    const groupIndex = parseInt(contractId.slice(-2));
    return new Contract(address, contractId, groupIndex, deployResult);
  }

  export class Contract {
    readonly address: Address;
    readonly contractId: string;
    readonly groupIndex: number;
    deployResult: SignDeployContractTxResult | undefined;

    constructor(
      address: Address,
      contractId: string,
      groupIndex: number,
      deployResult?: SignDeployContractTxResult
    ) {
      this.address = address;
      this.contractId = contractId;
      this.groupIndex = groupIndex;
      this.deployResult = deployResult;
    }

    async fetchState(): Promise<State> {
      const state = await artifact.fetchState(this.address, this.groupIndex);
      return {
        ...state,
        btcPrice: state.fields["btcPrice"] as bigint,
      };
    }

    // This is used for testing contract functions
    static stateForTest(
      btcPrice: bigint,
      asset?: Asset,
      address?: string
    ): ContractState {
      const newAsset = {
        alphAmount: asset?.alphAmount ?? BigInt(1000000000000000000),
        tokens: asset?.tokens,
      };
      return artifact.toState({ btcPrice: btcPrice }, newAsset, address);
    }

    static async testGreetMethod(
      initFields: Greeter.Fields,
      testParams?: {
        group?: number;
        address?: string;
        initialAsset?: Asset;
        existingContracts?: ContractState[];
        inputAssets?: InputAsset[];
      }
    ): Promise<Omit<TestContractResult, "returns"> & { returns: [bigint] }> {
      const initialAsset = {
        alphAmount:
          testParams?.initialAsset?.alphAmount ?? BigInt(1000000000000000000),
        tokens: testParams?.initialAsset?.tokens,
      };
      const _testParams = {
        ...testParams,
        testMethodIndex: 0,
        testArgs: {},
        initialFields: initFields,
        initialAsset: initialAsset,
      };
      const testResult = await artifact.testPublicMethod("greet", _testParams);
      return { ...testResult, returns: testResult.returns as [bigint] };
    }

    async callGreetMethod(callParams?: {
      worldStateBlockHash?: string;
      txId?: string;
      existingContracts?: string[];
      inputAssets?: node.TestInputAsset[];
    }): Promise<bigint> {
      const callResult = await web3
        .getCurrentNodeProvider()
        .contracts.postContractsCallContract({
          group: this.groupIndex,
          worldStateBlockHash: callParams?.worldStateBlockHash,
          txId: callParams?.txId,
          address: this.address,
          methodIndex: 0,
          args: [],
          existingContracts: callParams?.existingContracts,
          inputAssets: callParams?.inputAssets,
        });
      return fromApiArray(callResult.returns, ["U256"])[0] as bigint;
    }
  }

  export const artifact = ContractArtifact.fromJson(
    JSON.parse(`{
  "version": "v1.7.0",
  "name": "Greeter",
  "bytecode": "01010c010000000105030c7bce0002",
  "codeHash": "d8a1c2190c6c54f720608a4b264d1c648a9865e0744e942e489c87e64d4e596a",
  "fieldsSig": {
    "names": [
      "btcPrice"
    ],
    "types": [
      "U256"
    ],
    "isMutable": [
      false
    ]
  },
  "eventsSig": [],
  "functions": [
    {
      "name": "greet",
      "usePreapprovedAssets": false,
      "useAssetsInContract": false,
      "isPublic": true,
      "paramNames": [],
      "paramTypes": [],
      "paramIsMutable": [],
      "returnTypes": [
        "U256"
      ]
    }
  ]
}`)
  );
}
