/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  web3,
  Contract as ContractArtifact,
  SignerProvider,
  Address,
  Token,
  toApiVals,
  ContractState,
  node,
  binToHex,
  TestContractResult,
  InputAsset,
  Asset,
  HexString,
  SignDeployContractTxResult,
  contractIdFromAddress,
  fromApiArray,
  ONE_ALPH,
  groupOfAddress,
  fromApiVals,
  subscribeToEvents,
  SubscribeOptions,
  Subscription,
  EventSubscription,
} from "@alephium/web3";

export namespace Sub {
  export type Fields = {
    result: bigint;
  };

  export type State = Fields & Omit<ContractState, "fields">;

  export type SubEvent = {
    blockHash: string;
    txId: string;
    x: bigint;
    y: bigint;
    eventIndex: number;
  };

  export async function deploy(
    signer: SignerProvider,
    initFields: Fields,
    deployParams?: {
      initialAttoAlphAmount?: bigint;
      initialTokenAmounts?: Token[];
      issueTokenAmount?: bigint;
      gasAmount?: number;
      gasPrice?: bigint;
    }
  ): Promise<SubInstance> {
    const deployResult = await artifact.deploy(signer, {
      initialFields: initFields,
      initialAttoAlphAmount: deployParams?.initialAttoAlphAmount,
      initialTokenAmounts: deployParams?.initialTokenAmounts,
      issueTokenAmount: deployParams?.issueTokenAmount,
      gasAmount: deployParams?.gasAmount,
      gasPrice: deployParams?.gasPrice,
    });
    return new SubInstance(deployResult.contractAddress, deployResult);
  }

  export function attach(
    address: string,
    deployResult?: SignDeployContractTxResult
  ): SubInstance {
    return new SubInstance(address, deployResult);
  }

  // This is used for testing contract functions
  export function stateForTest(
    result: bigint,
    asset?: Asset,
    address?: string
  ): ContractState {
    const newAsset = {
      alphAmount: asset?.alphAmount ?? ONE_ALPH,
      tokens: asset?.tokens,
    };
    return Sub.artifact.toState({ result: result }, newAsset, address);
  }

  export async function testSubMethod(
    args: { array: [bigint, bigint] },
    initFields: Fields,
    testParams?: {
      group?: number;
      address?: string;
      initialAsset?: Asset;
      existingContracts?: ContractState[];
      inputAssets?: InputAsset[];
    }
  ): Promise<Omit<TestContractResult, "returns"> & { returns: [bigint] }> {
    const initialAsset = {
      alphAmount: testParams?.initialAsset?.alphAmount ?? ONE_ALPH,
      tokens: testParams?.initialAsset?.tokens,
    };
    const _testParams = {
      ...testParams,
      testMethodIndex: 0,
      testArgs: args,
      initialFields: initFields,
      initialAsset: initialAsset,
    };
    const testResult = await artifact.testPublicMethod("sub", _testParams);
    return { ...testResult, returns: testResult.returns as [bigint] };
  }

  export const artifact = ContractArtifact.fromJson(
    JSON.parse(`{
  "version": "v1.7.0",
  "name": "Sub",
  "bytecode": "01011901000202010c05160016015fa00016002a16012ba100a00002",
  "codeHash": "513645f5c95a28d55a51070f3d5c51edbda05a98f46b23cad59952e2ee4846a1",
  "fieldsSig": {
    "names": [
      "result"
    ],
    "types": [
      "U256"
    ],
    "isMutable": [
      true
    ]
  },
  "eventsSig": [
    {
      "name": "Sub",
      "fieldNames": [
        "x",
        "y"
      ],
      "fieldTypes": [
        "U256",
        "U256"
      ]
    }
  ],
  "functions": [
    {
      "name": "sub",
      "usePreapprovedAssets": false,
      "useAssetsInContract": false,
      "isPublic": true,
      "paramNames": [
        "array"
      ],
      "paramTypes": [
        "[U256;2]"
      ],
      "paramIsMutable": [
        false
      ],
      "returnTypes": [
        "U256"
      ]
    }
  ]
}`)
  );
}

export class SubInstance {
  readonly address: Address;
  readonly contractId: string;
  readonly groupIndex: number;
  deployResult: SignDeployContractTxResult | undefined;

  constructor(address: Address, deployResult?: SignDeployContractTxResult) {
    this.address = address;
    this.contractId = binToHex(contractIdFromAddress(address));
    this.groupIndex = groupOfAddress(address);
    this.deployResult = deployResult;
  }

  async fetchState(): Promise<Sub.State> {
    const state = await Sub.artifact.fetchState(this.address, this.groupIndex);
    return {
      ...state,
      result: state.fields["result"] as bigint,
    };
  }

  private decodeSubEvent(event: node.ContractEvent): Sub.SubEvent {
    if (event.eventIndex !== 0) {
      throw new Error(
        "Invalid event index: " + event.eventIndex + ", expected: 0"
      );
    }
    const fields = fromApiVals(event.fields, ["x", "y"], ["U256", "U256"]);
    return {
      blockHash: event.blockHash,
      txId: event.txId,
      x: fields["x"] as bigint,
      y: fields["y"] as bigint,
      eventIndex: event.eventIndex,
    };
  }

  subscribeSubEvent(
    options: SubscribeOptions<Sub.SubEvent>,
    fromCount?: number
  ): EventSubscription {
    const messageCallback = (event: node.ContractEvent): Promise<void> => {
      if (event.eventIndex !== 0) {
        return Promise.resolve();
      }
      return options.messageCallback(this.decodeSubEvent(event));
    };

    const errorCallback = (
      err: any,
      subscription: Subscription<node.ContractEvent>
    ): Promise<void> => {
      return options.errorCallback(
        err,
        subscription as unknown as Subscription<Sub.SubEvent>
      );
    };
    const opt: SubscribeOptions<node.ContractEvent> = {
      pollingInterval: options.pollingInterval,
      messageCallback: messageCallback,
      errorCallback: errorCallback,
    };
    return subscribeToEvents(opt, this.address, fromCount);
  }

  async callSubMethod(
    args: { array: [bigint, bigint] },
    callParams?: {
      worldStateBlockHash?: string;
      txId?: string;
      existingContracts?: string[];
      inputAssets?: node.TestInputAsset[];
    }
  ): Promise<bigint> {
    const callResult = await web3
      .getCurrentNodeProvider()
      .contracts.postContractsCallContract({
        group: this.groupIndex,
        worldStateBlockHash: callParams?.worldStateBlockHash,
        txId: callParams?.txId,
        address: this.address,
        methodIndex: 0,
        args: toApiVals({ array: args.array }, ["array"], ["[U256;2]"]),
        existingContracts: callParams?.existingContracts,
        inputAssets: callParams?.inputAssets,
      });
    return fromApiArray(callResult.returns, ["U256"])[0] as bigint;
  }
}
