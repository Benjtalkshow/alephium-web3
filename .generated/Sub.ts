/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  web3,
  Contract as ContractArtifact,
  SignerProvider,
  Address,
  Token,
  toApiVals,
  ContractState,
  node,
  binToHex,
  TestContractResult,
  InputAsset,
  Asset,
  SignDeployContractTxResult,
  contractIdFromAddress,
  fromApiArray,
  fromApiVals,
  subscribeToEvents,
  SubscribeOptions,
  Subscription,
  EventSubscription,
} from "@alephium/web3";

export namespace Sub {
  export type Fields = {
    result: bigint;
  };

  export type State = Fields & Omit<ContractState, "fields">;

  export type SubEvent = {
    blockHash: string;
    txId: string;
    eventIndex: number;
    x: bigint;
    y: bigint;
  };

  export async function deploy(
    signer: SignerProvider,
    initFields: Sub.Fields,
    deployParams?: {
      initialAttoAlphAmount?: bigint;
      initialTokenAmounts?: Token[];
      issueTokenAmount?: bigint;
      gasAmount?: number;
      gasPrice?: bigint;
    }
  ): Promise<Contract> {
    const deployResult = await artifact.deploy(signer, {
      initialFields: initFields,
      initialAttoAlphAmount: deployParams?.initialAttoAlphAmount,
      initialTokenAmounts: deployParams?.initialTokenAmounts,
      issueTokenAmount: deployParams?.issueTokenAmount,
      gasAmount: deployParams?.gasAmount,
      gasPrice: deployParams?.gasPrice,
    });
    return new Contract(
      deployResult.contractAddress,
      deployResult.contractId,
      deployResult.fromGroup,
      deployResult
    );
  }

  export function attach(
    address: string,
    deployResult?: SignDeployContractTxResult
  ): Contract {
    const contractId = binToHex(contractIdFromAddress(address));
    const groupIndex = parseInt(contractId.slice(-2));
    return new Contract(address, contractId, groupIndex, deployResult);
  }

  export class Contract {
    readonly address: Address;
    readonly contractId: string;
    readonly groupIndex: number;
    deployResult: SignDeployContractTxResult | undefined;

    constructor(
      address: Address,
      contractId: string,
      groupIndex: number,
      deployResult?: SignDeployContractTxResult
    ) {
      this.address = address;
      this.contractId = contractId;
      this.groupIndex = groupIndex;
      this.deployResult = deployResult;
    }

    async fetchState(): Promise<State> {
      const state = await artifact.fetchState(this.address, this.groupIndex);
      return {
        ...state,
        result: state.fields["result"] as bigint,
      };
    }

    private decodeSubEvent(event: node.ContractEvent): Sub.SubEvent {
      if (event.eventIndex !== 0) {
        throw new Error(
          "Invalid event index: " + event.eventIndex + ", expected: 0"
        );
      }
      const fields = fromApiVals(event.fields, ["x", "y"], ["U256", "U256"]);
      return {
        blockHash: event.blockHash,
        txId: event.txId,
        eventIndex: event.eventIndex,
        x: fields["x"] as bigint,
        y: fields["y"] as bigint,
      };
    }

    subscribeSubEvent(
      options: SubscribeOptions<SubEvent>,
      fromCount?: number
    ): EventSubscription {
      const messageCallback = (event: node.ContractEvent): Promise<void> => {
        if (event.eventIndex !== 0) {
          return Promise.resolve();
        }
        return options.messageCallback(this.decodeSubEvent(event));
      };

      const errorCallback = (
        err: any,
        subscription: Subscription<node.ContractEvent>
      ): Promise<void> => {
        return options.errorCallback(
          err,
          subscription as unknown as Subscription<SubEvent>
        );
      };
      const opt: SubscribeOptions<node.ContractEvent> = {
        pollingInterval: options.pollingInterval,
        messageCallback: messageCallback,
        errorCallback: errorCallback,
      };
      return subscribeToEvents(opt, this.address, fromCount);
    }

    // This is used for testing contract functions
    static stateForTest(
      result: bigint,
      asset?: Asset,
      address?: string
    ): ContractState {
      const newAsset = {
        alphAmount: asset?.alphAmount ?? BigInt(1000000000000000000),
        tokens: asset?.tokens,
      };
      return artifact.toState({ result: result }, newAsset, address);
    }

    static async testSubMethod(
      args: { array: [bigint, bigint] },
      initFields: Sub.Fields,
      testParams?: {
        group?: number;
        address?: string;
        initialAsset?: Asset;
        existingContracts?: ContractState[];
        inputAssets?: InputAsset[];
      }
    ): Promise<Omit<TestContractResult, "returns"> & { returns: [bigint] }> {
      const initialAsset = {
        alphAmount:
          testParams?.initialAsset?.alphAmount ?? BigInt(1000000000000000000),
        tokens: testParams?.initialAsset?.tokens,
      };
      const _testParams = {
        ...testParams,
        testMethodIndex: 0,
        testArgs: args,
        initialFields: initFields,
        initialAsset: initialAsset,
      };
      const testResult = await artifact.testPublicMethod("sub", _testParams);
      return { ...testResult, returns: testResult.returns as [bigint] };
    }

    async callSubMethod(
      args: { array: [bigint, bigint] },
      callParams?: {
        worldStateBlockHash?: string;
        txId?: string;
        existingContracts?: string[];
        inputAssets?: node.TestInputAsset[];
      }
    ): Promise<bigint> {
      const callResult = await web3
        .getCurrentNodeProvider()
        .contracts.postContractsCallContract({
          group: this.groupIndex,
          worldStateBlockHash: callParams?.worldStateBlockHash,
          txId: callParams?.txId,
          address: this.address,
          methodIndex: 0,
          args: toApiVals({ array: args.array }, ["array"], ["[U256;2]"]),
          existingContracts: callParams?.existingContracts,
          inputAssets: callParams?.inputAssets,
        });
      return fromApiArray(callResult.returns, ["U256"])[0] as bigint;
    }
  }

  export const artifact = ContractArtifact.fromJson(
    JSON.parse(`{
  "version": "v1.7.0",
  "name": "Sub",
  "bytecode": "01011901000202010c05160016015fa00016002a16012ba100a00002",
  "codeHash": "513645f5c95a28d55a51070f3d5c51edbda05a98f46b23cad59952e2ee4846a1",
  "fieldsSig": {
    "names": [
      "result"
    ],
    "types": [
      "U256"
    ],
    "isMutable": [
      true
    ]
  },
  "eventsSig": [
    {
      "name": "Sub",
      "fieldNames": [
        "x",
        "y"
      ],
      "fieldTypes": [
        "U256",
        "U256"
      ]
    }
  ],
  "functions": [
    {
      "name": "sub",
      "usePreapprovedAssets": false,
      "useAssetsInContract": false,
      "isPublic": true,
      "paramNames": [
        "array"
      ],
      "paramTypes": [
        "[U256;2]"
      ],
      "paramIsMutable": [
        false
      ],
      "returnTypes": [
        "U256"
      ]
    }
  ]
}`)
  );
}
