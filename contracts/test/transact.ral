Contract Transact(
    tokenId: ByteVec,
    mut totalALPH: U256,
    mut totalTokens: U256
) {
    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn deposit() -> () {
        transferTokenToSelf!(callerAddress!(), ALPH, 1 alph)
        totalALPH = totalALPH + 1 alph
        return
    }

    @using(preapprovedAssets = false, assetsInContract = true)
    pub fn withdraw() -> () {
        transferTokenFromSelf!(callerAddress!(), ALPH, 1 alph)
        totalALPH = totalALPH - 1 alph
        return
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn depositToken(amount: U256) -> () {
        transferTokenToSelf!(callerAddress!(), tokenId, amount)
        totalTokens = totalTokens + amount
        return
    }

    @using(preapprovedAssets = false, assetsInContract = true)
    pub fn withdrawToken(amount: U256) -> () {
        transferTokenFromSelf!(callerAddress!(), tokenId, amount)
        totalTokens = totalTokens - amount
        return
    }

    pub fn getTotalALPH() -> U256 {
        return totalALPH
    }

    pub fn getTotalTokens() -> U256 {
        return totalTokens
    }
}

TxScript MultiDeposit(c0: Transact, c1: Transact, tokenId: ByteVec) {
    c0.deposit{callerAddress!() -> ALPH: 1 alph}()
    c1.deposit{callerAddress!() -> ALPH: 1 alph}()
    c0.depositToken{callerAddress!() -> tokenId: 1e18}(1e18)
    c1.depositToken{callerAddress!() -> tokenId: 1e18}(1e18)
}

TxScript MultiWithdraw(c0: Transact, c1: Transact) {
    c0.withdraw()
    c1.withdraw()
    c0.withdrawToken(1e18)
    c1.withdrawToken(1e18)
}
